@model SistemaGestionJudicial.Models.CrimeFilterViewModel
@using System.Text.Json

@{
    ViewData["Title"] = "CrimeReports";
}

@{
    var donutLabelsJson = JsonSerializer.Serialize(Model.CrimeLabels);
    var donutDataJson = JsonSerializer.Serialize(Model.CrimeCounts);

    var trendLabelsJson = JsonSerializer.Serialize(Model.Months);
    var trendDataJson = JsonSerializer.Serialize(Model.MonthlyTotals);
}


@section Styles {
    <link rel="stylesheet" href="~/css/crimereports.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
}

<div class="flex-1 p-4 overflow-auto">
    <!-- Header -->
    <header class="bg-white p-4 rounded-lg shadow-sm mb-4">
        <h1 class="text-xl font-semibold">Crime Analytics Dashboard</h1>
        <p class="text-gray-600">Latest crime statistics and trends</p>
    </header>

    <form id="formexcel" asp-controller="CrimeReports" asp-action="ExportToExcel" method="post">
        <input type="hidden" name="FromDate" value="@Model.FromDate?.ToString("yyyy-MM-dd")" />
        <input type="hidden" name="ToDate" value="@Model.ToDate?.ToString("yyyy-MM-dd")" />
        <input type="hidden" name="CrimeType" value="@Model.CrimeType" />

        <button type="button"
                id="exportExcelBtn"
                class="bg-green-600 hover:bg-green-700 text-white px-5 mb-4 py-2 rounded-lg">
            <i class="fas fa-file-excel mr-2"></i>Export Excel
        </button>

    </form>


    <!-- 🔍 Filters Section -->
    <form asp-controller="CrimeReports" asp-action="CrimeReportsFilter" method="post" id="formfilter" class="bg-white p-6 rounded-lg shadow-sm mb-6">
        <div class="mb-4">
            <h2 class="text-lg font-semibold">Filter Crimes</h2>
            <p class="text-sm text-gray-500">Select criteria to filter the data</p>
        </div>

        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-600 mb-1">From</label>
                <input type="date" name="FromDate" value="@Model.FromDate?.ToString("yyyy-MM-dd")"
                       class="w-full border-gray-300 rounded-lg shadow-sm p-2 focus:ring focus:ring-blue-200" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-600 mb-1">To</label>
                <input type="date" name="ToDate" value="@Model.ToDate?.ToString("yyyy-MM-dd")"
                       class="w-full border-gray-300 rounded-lg shadow-sm p-2 focus:ring focus:ring-blue-200" />
            </div>
            <div class="relative">
                <label class="block text-sm font-medium text-gray-600 mb-1">Crime Type</label>
                <input id="crimeInput" name="CrimeType" value="@Model.CrimeType"
                       type="text" placeholder="Search crime type..."
                       class="w-full border border-gray-300 rounded-lg p-2 shadow-sm focus:ring focus:ring-blue-200"
                       oninput="filterCrimeOptions()" autocomplete="off" />
                <ul id="crimeOptions"
                    class="absolute z-50 w-full bg-white border border-gray-300 rounded-md shadow mt-1 hidden max-h-48 overflow-y-auto">
                </ul>
            </div>
        </div>

        <div class="flex flex-wrap gap-3 justify-end mt-6">
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-5 py-2 rounded-lg">
                <i class="fas fa-filter mr-2"></i>Apply Filters
            </button>
            <button type="button" onclick="clearFilters()" class="bg-gray-500 hover:bg-gray-600 text-white px-5 py-2 rounded-lg">
                <i class="fas fa-eraser mr-2"></i>Limpiar filtros
            </button>

        </div>
    </form>

    <!-- Metric: Total Crimes with Closer Icons -->
    <div class="relative flex justify-center items-center mb-6">
        <div id="iconmetricleft" class="absolute left-1 sm:left-1.5 top-1/2 transform -translate-y-1/2 text-blue-500 text-4xl animate-float hidden md:block">
            <i class="fas fa-balance-scale"></i>
        </div>
        <div class="bg-white p-6 rounded-lg shadow-md w-full sm:w-3/4 md:w-1/2 lg:w-1/3 text-center z-10">
            <p class="text-gray-500 text-sm">Total Crimes</p>
            <h3 class="text-4xl font-extrabold text-blue-600 mt-2">@(@Model.Results?.Count ?? 0)</h3>
        </div>
        <div id="iconmetricr" class="absolute right-1 sm:right-1.5 top-1/2 transform -translate-y-1/2 text-red-500 text-4xl animate-float hidden md:block">
            <i class="fas fa-shield-halved"></i>
        </div>
    </div>

    <!-- 🔄 Chart Type Selector + Crime Trend -->
    <div class="bg-white p-6 rounded-lg shadow-sm mb-6">
        <div class="flex items-center justify-between mb-4">
            <h3 class="font-semibold text-lg">Monthly Crime Trends</h3>
            <select id="chartTypeSelector" class="border-gray-300 rounded p-2 text-sm">
                <option value="line">Línea</option>
                <option value="bar">Barras</option>
                <option value="radar">Radar</option>
            </select>
        </div>
        <div class="relative h-64">
            <canvas id="crimeTrendChart" class="w-full h-full"></canvas>
        </div>
    </div>

    <!-- Donut Chart -->
    <div class="bg-white p-6 rounded-lg shadow-sm mb-6">
        <h3 class="font-semibold text-lg mb-4">Distribución de delitos</h3>
        <div class="relative h-64">
            <canvas id="crimeDonutChart" class="w-full h-full"></canvas>
        </div>
    </div>

    <!-- 📄 Tabla de Denuncias -->
    <div class="bg-white rounded-lg shadow-sm overflow-hidden">
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="p-3 text-left text-sm font-medium text-gray-600">Delito</th>
                        <th class="p-3 text-left text-sm font-medium text-gray-600">Fecha</th>
                        <th class="p-3 text-left text-sm font-medium text-gray-600">Ubicación</th>
                        <th class="p-3 text-left text-sm font-medium text-gray-600">Denunciante</th>
                        <th class="p-3 text-left text-sm font-medium text-gray-600">Sospechoso</th>
                        <th class="p-3 text-left text-sm font-medium text-gray-600">Severidad</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-100 text-sm">
                    @if(Model.Results != null)
                    @foreach (var item in Model.Results)
                    {
                        <tr>
                            <td class="p-3">@item.NombreDelito</td>
                            <td class="p-3">@item.FechaDenuncia.ToString("yyyy-MM-dd")</td>
                            <td class="p-3">@item.Lugar</td>
                            <td class="p-3">@item.Demandante</td>
                            <td class="p-3 @(item.Demandado == "No asignado" ? "text-gray-500 italic" : "")">@item.Demandado</td>
                            <td class="p-3">
                                <span class="px-2 py-1 text-xs rounded
                                                @(item.Severidad == "Alta" ? "bg-red-100 text-red-600" :
                                                                                    item.Severidad == "Media" ? "bg-yellow-100 text-yellow-700" :
                                                                                    "bg-green-100 text-green-700")">
                                @item.Severidad
                            </span>
                        </td>
                    </tr>
                                        }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // 🎯 Exportar Excel
        const exportBtn = document.getElementById('exportExcelBtn');
        exportBtn?.addEventListener('click', async function () {
            exportBtn.disabled = true;
            exportBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Exportando...';

            const form = document.getElementById('formexcel');
            const formData = new FormData(form);

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) throw new Error('Error al exportar.');

                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `CrimeReports_${new Date().toISOString().slice(0, 19).replace(/[-T:]/g, "")}.xlsx`;
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);

                setTimeout(() => {
                    exportBtn.disabled = false;
                    exportBtn.innerHTML = '<i class="fas fa-file-excel mr-2"></i>Export Excel';
                }, 1500);

            } catch (err) {
                alert("Ocurrió un error al exportar el Excel.");
                console.error(err);
                exportBtn.disabled = false;
                exportBtn.innerHTML = '<i class="fas fa-file-excel mr-2"></i>Export Excel';
            }
        });

        // 📊 Donut y Trend Chart
        const ctxDonut = document.getElementById("crimeDonutChart")?.getContext("2d");
        if (ctxDonut) {
            new Chart(ctxDonut, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(donutLabelsJson),
                    datasets: [{
                        data: @Html.Raw(donutDataJson),
                        backgroundColor: ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#6366f1']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { legend: { position: 'top' } }
                }
            });
        }

        const ctxTrend = document.getElementById("crimeTrendChart")?.getContext("2d");
        if (ctxTrend) {
            let chartType = 'line';
            const trendData = {
                labels: @Html.Raw(trendLabelsJson),
                datasets: [{
                    label: 'Crímenes',
                    data: @Html.Raw(trendDataJson),
                    borderColor: '#3b82f6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            };

            let crimeTrendChart = new Chart(ctxTrend, {
                type: chartType,
                data: trendData,
                options: { responsive: true, maintainAspectRatio: false }
            });

            document.getElementById("chartTypeSelector")?.addEventListener("change", function () {
                chartType = this.value;
                crimeTrendChart.destroy();
                crimeTrendChart = new Chart(ctxTrend, {
                    type: chartType,
                    data: trendData,
                    options: { responsive: true, maintainAspectRatio: false }
                });
            });
        }

        // 📅 Validaciones de fechas
        const fromInput = document.querySelector('input[name="FromDate"]');
        const toInput = document.querySelector('input[name="ToDate"]');
        const today = new Date().toISOString().split('T')[0];
        const minDate = '2024-01-01';

        fromInput?.setAttribute('min', minDate);
        fromInput?.setAttribute('max', today);
        toInput?.setAttribute('max', today);

        const updateToDateLimits = () => {
            const fromValue = fromInput?.value;
            if (toInput) toInput.setAttribute('min', fromValue || minDate);
        };
        fromInput?.addEventListener('change', updateToDateLimits);
        updateToDateLimits();

        // 🧽 Limpiar filtros
        window.clearFilters = function () {
            const form = document.querySelector('#formfilter');
            if (!form) return;
            form.querySelector('input[name="FromDate"]')?.value = '';
            form.querySelector('input[name="ToDate"]')?.value = '';
            form.querySelector('input[name="CrimeType"]')?.value = '';
            form.submit();
        };

        // 🔐 Validar antes de aplicar filtros
        document.querySelector('#formfilter')?.addEventListener('submit', function (e) {
            const fromDate = this.querySelector('input[name="FromDate"]')?.value.trim();
            const toDate = this.querySelector('input[name="ToDate"]')?.value.trim();
            const crimeType = this.querySelector('input[name="CrimeType"]')?.value.trim();

            if (!fromDate && !toDate && !crimeType) {
                e.preventDefault();
                alert('Por favor, llena al menos un campo para aplicar filtros.');
            }
        });

        // 🔍 Autocompletado tipo de crimen
        const crimeInput = document.getElementById('crimeInput');
        const crimeOptions = document.getElementById('crimeOptions');
        let selectedIndex = -1;
        let filteredItems = [];

        window.filterCrimeOptions = async function () {
            const search = crimeInput?.value.trim();
            if (!search) return crimeOptions?.classList.add('hidden');

            try {
                const response = await fetch(`/CrimeReports/SearchCrimeTypes?term=${encodeURIComponent(search)}`);
                const filtered = await response.json();
                renderCrimeOptions(filtered);
            } catch (err) {
                console.error(err);
                crimeOptions?.classList.add('hidden');
            }
        };

        function renderCrimeOptions(list) {
            if (!crimeOptions) return;
            crimeOptions.innerHTML = '';
            selectedIndex = -1;
            filteredItems = list.slice(0, 10);
            if (filteredItems.length === 0) return crimeOptions.classList.add('hidden');

            const frag = document.createDocumentFragment();
            filteredItems.forEach((crime, i) => {
                const li = document.createElement('li');
                li.textContent = crime;
                li.className = 'p-2 hover:bg-blue-100 cursor-pointer';
                li.dataset.index = i;
                li.onclick = () => {
                    crimeInput.value = crime;
                    crimeOptions.classList.add('hidden');
                };
                frag.appendChild(li);
            });
            crimeOptions.appendChild(frag);
            crimeOptions.classList.remove('hidden');
        }

        crimeInput?.addEventListener('keydown', function (e) {
            const items = crimeOptions?.querySelectorAll('li');
            if (e.key === 'Enter' && selectedIndex === -1) e.preventDefault();

            if (e.key === 'ArrowDown' && selectedIndex < filteredItems.length - 1) {
                e.preventDefault();
                selectedIndex++;
                updateSelection(items);
            } else if (e.key === 'ArrowUp' && selectedIndex > 0) {
                e.preventDefault();
                selectedIndex--;
                updateSelection(items);
            } else if (e.key === 'Enter' && selectedIndex >= 0) {
                e.preventDefault();
                crimeInput.value = filteredItems[selectedIndex];
                crimeOptions.classList.add('hidden');
                document.querySelector('#formfilter').submit();
            }
        });

        function updateSelection(items) {
            items?.forEach((item, i) => {
                item.classList.toggle('bg-blue-200', i === selectedIndex);
            });
            items[selectedIndex]?.scrollIntoView({ block: 'nearest' });
        }

        document.addEventListener('click', function (e) {
            if (!crimeInput?.contains(e.target) && !crimeOptions?.contains(e.target)) {
                crimeOptions?.classList.add('hidden');
            }
        });
    });
</script>


